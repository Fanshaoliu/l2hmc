import "//learning/brain/borg/tf.borg" as tf
import "//learning/brain/borg/supervisor.borg" as sv
import "//production/borg/templates/lambda/buildtool_support.borg" as build
import "//learning/brain/research/tf_brain.borg" as tf_brain

vars = tf_brain.vars {
  gfs_user = 'danilevy-brain'
  num_train_tasks = 1
  num_ps_tasks = 0
  cell = 'ok'
  name = 'l2hmc'
  service_name = "%name%"
  mldash_description = 'l2hmc'
  team = "brain"
  batch_priority = 115
  gcu_per_train_task = 9.6   // Max limit is 9.6
  gcu_per_eval_task = 9.6    // Max limit is 9.6
  cpu_accounting = "distbelief"
  log_dir = replace("/cns/%vars.cell%-d/home/%real_username()%/rs=6.3/l2hmc/%exp_id%/%hparams%", '\[|\]', '')
  train_dir = vars.log_dir
  root_dir = "/cns/%vars.cell%-d/home/%real_username()%/rs=6.3/l2hmc/%exp_id%"
  exp_id = external
  hparams = external
  use_allocator=false
  use_gpu=false
  eval_use_gpu=false
}

template service experiment {
  sanitize_hps = replace(replace(vars.hparams, '=', '_'), ',', '.')
  name = "%real_username()%.%sanitize_hps%"
  batch_strategy = cond(vars.batch_priority > 115, 'RUN_RESERVED', 'RUN_SOON')

}
service exp = experiment {
  team = vars.team
  service daniel = tf_brain.tf_joined_tmpl {
    name = "run"
    params {
      service_name = name
    }
    scheduling {
      max_per_task_failures = 50
    }
    job worker {
      requirements {
        autopilot = true
        // cpu = 1
        // gpu = cond(vars.use_gpu, 1, null)
        // constraints = cond(vars.use_gpu, "platform_plugin:tesla_k40m=8", null)
        // ram = G
        // disk = 4G
      }
      // Use our trainer binary.
      binary = build.binfile_v2(
        build.google3dir(myfilename()),
        "experimental/users/danilevy/l2hmc/run.par")
      args {
        // Use the 'local' session.
        master = 'local'
        // How long to train for.
        // max_number_of_steps = 30000
        // Where to store the log and event files.
        train_dir = vars.train_dir
        hparams = vars.hparams
      }
    }

    job eval = null
    job tensorboard = null
    // job mldash_exporter = null
  }
}
